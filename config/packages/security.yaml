security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
                path : /
                    # by default, the feature is enabled by checking a
                    # checkbox in the login form (see below), uncomment the
                    # following line to always enable it.
                    #always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/categories/create, roles: ROLE_ADMIN }
        - { path: ^/dashboard, roles: ROLE_ADMIN }
        - { path: ^/ignorer_signalement, roles: ROLE_ADMIN }
        - { path: ^/gestionSignal, roles: ROLE_ADMIN }
        - { path: ^/listSignalement, roles: ROLE_ADMIN }
        - { path: ^/bloquer_utilisateur, roles: ROLE_ADMIN }
        - { path: ^/supprimerUtilisateur, roles: ROLE_ADMIN }
        - { path: ^/accesMessage, roles: ROLE_ADMIN }
        - { path: ^/adminannonceRemove, roles: ROLE_ADMIN }
        - { path: ^/adminajouterAdmin, roles: ROLE_ADMIN }
        - { path: ^/adminajouterUtilisateur, roles: ROLE_ADMIN }

        - { path: ^/produits/create, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/produits/mesAnnonces, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/produits/delete, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/images/create, roles: [ ROLE_USER, ROLE_ADMIN ] }

        - { path: ^/message, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/chat, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/signalisation_create, roles: [ ROLE_USER, ROLE_ADMIN ] }


        - { path: ^/commandes/ajout, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/stripe, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/stripe/success, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/stripe/error, roles: [ ROLE_USER, ROLE_ADMIN ] }

        - { path: ^/profil, roles: [ ROLE_USER, ROLE_ADMIN ] }
        - { path: ^/modifierProfil, roles: [ ROLE_USER, ROLE_ADMIN ] }



        # - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
